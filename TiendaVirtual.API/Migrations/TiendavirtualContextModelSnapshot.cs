// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiendaVirtual.API.Data;

#nullable disable

namespace TiendaVirtual.API.Migrations
{
    [DbContext(typeof(TiendavirtualContext))]
    partial class TiendavirtualContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TiendaVirtual.API.Models.Barrio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreBarrio")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ZonaId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ZonaId" }, "ZonaId");

                    b.ToTable("barrio", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Carrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UsuarioId" }, "UsuarioId");

                    b.ToTable("carrito", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Carritoproducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("CarritoId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PrecioUnitario")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CarritoId" }, "CarritoId");

                    b.HasIndex(new[] { "ProductoId" }, "ProductoId");

                    b.ToTable("carritoproducto", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("categoria", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BarrioId")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Genero")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BarrioId" }, "BarrioId");

                    b.HasIndex(new[] { "UsuarioId" }, "UsuarioId")
                        .HasDatabaseName("UsuarioId1");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Clientenatural", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApellidoMaterno")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ApellidoPaterno")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClienteId" }, "ClienteId")
                        .IsUnique();

                    b.ToTable("clientenatural", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Credito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaDesembolso")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdPedido")
                        .HasColumnType("int");

                    b.Property<decimal>("InteresMensual")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Monto")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPedido" }, "IdPedido");

                    b.ToTable("credito", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Cuota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaPagoProgramado")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdCredito")
                        .HasColumnType("int");

                    b.Property<decimal>("Interes")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Monto")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCredito" }, "IdCredito");

                    b.ToTable("cuota", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<int?>("PedidoId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TelefonoDelyvery")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PedidoId" }, "PedidoId");

                    b.ToTable("delivery", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Detallepedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<float>("Cantidad")
                        .HasColumnType("float");

                    b.Property<decimal>("Precio")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("IdPedido", "IdProducto")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdProducto" }, "IdProducto");

                    b.ToTable("detallepedido", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Direccionenvio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Departamento")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Latitud")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitud")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UsuarioId" }, "UsuarioId")
                        .HasDatabaseName("UsuarioId2");

                    b.ToTable("direccionenvio", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Estadopedidohistorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EstadoAnterior")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EstadoNuevo")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FechaCambio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("IdPedido")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPedido" }, "IdPedido")
                        .HasDatabaseName("IdPedido1");

                    b.ToTable("estadopedidohistorial", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoControl")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdPedido")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Qr")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPedido" }, "IdPedido")
                        .HasDatabaseName("IdPedido2");

                    b.ToTable("factura", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Juridico", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RepresentanteLegal")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClienteId" }, "ClienteId")
                        .IsUnique()
                        .HasDatabaseName("ClienteId1");

                    b.ToTable("juridico", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Notificacionusuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("FechaEnvio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Leido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Mensaje")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UsuarioId" }, "UsuarioId")
                        .HasDatabaseName("UsuarioId3");

                    b.ToTable("notificacionusuario", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime");

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("TipoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdPedido" }, "IdPedido")
                        .HasDatabaseName("IdPedido3");

                    b.ToTable("pago", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DireccionEnvioId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoPedido")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'Pendiente'");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdCliente")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DireccionEnvioId" }, "DireccionEnvioId");

                    b.HasIndex(new[] { "IdCliente" }, "IdCliente");

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdCategoria")
                        .HasColumnType("int");

                    b.Property<string>("Imagen")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<decimal>("PrecioVenta")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCategoria" }, "IdCategoria");

                    b.ToTable("producto", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Productotienda", b =>
                {
                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdTienda")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdProducto", "IdTienda")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdTienda" }, "IdTienda");

                    b.ToTable("productotienda", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.Property<string>("NombreProveedor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("proveedor", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Proveedorproducto", b =>
                {
                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<string>("NombreEspecifico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdProveedor", "IdProducto")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdProducto" }, "IdProducto")
                        .HasDatabaseName("IdProducto1");

                    b.ToTable("proveedorproducto", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Tienda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Latitud")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitud")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)");

                    b.Property<string>("NombreTienda")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tienda", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Correo" }, "Correo")
                        .IsUnique();

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Zona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreZona")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("zona", (string)null);
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Barrio", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Zona", "Zona")
                        .WithMany("Barrios")
                        .HasForeignKey("ZonaId")
                        .HasConstraintName("barrio_ibfk_1");

                    b.Navigation("Zona");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Carrito", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Usuario", "Usuario")
                        .WithMany("Carritos")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("carrito_ibfk_1");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Carritoproducto", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Carrito", "Carrito")
                        .WithMany("Carritoproductos")
                        .HasForeignKey("CarritoId")
                        .HasConstraintName("carritoproducto_ibfk_1");

                    b.HasOne("TiendaVirtual.API.Models.Producto", "Producto")
                        .WithMany("Carritoproductos")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("carritoproducto_ibfk_2");

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Cliente", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Barrio", "Barrio")
                        .WithMany("Clientes")
                        .HasForeignKey("BarrioId")
                        .HasConstraintName("cliente_ibfk_1");

                    b.HasOne("TiendaVirtual.API.Models.Usuario", "Usuario")
                        .WithMany("Clientes")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("cliente_ibfk_2");

                    b.Navigation("Barrio");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Clientenatural", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Cliente", "Cliente")
                        .WithOne("Clientenatural")
                        .HasForeignKey("TiendaVirtual.API.Models.Clientenatural", "ClienteId")
                        .IsRequired()
                        .HasConstraintName("clientenatural_ibfk_1");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Credito", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Pedido", "IdPedidoNavigation")
                        .WithMany("Creditos")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("credito_ibfk_1");

                    b.Navigation("IdPedidoNavigation");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Cuota", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Credito", "IdCreditoNavigation")
                        .WithMany("Cuota")
                        .HasForeignKey("IdCredito")
                        .HasConstraintName("cuota_ibfk_1");

                    b.Navigation("IdCreditoNavigation");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Delivery", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Pedido", "Pedido")
                        .WithMany("Deliveries")
                        .HasForeignKey("PedidoId")
                        .HasConstraintName("delivery_ibfk_1");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Detallepedido", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Pedido", "IdPedidoNavigation")
                        .WithMany("Detallepedidos")
                        .HasForeignKey("IdPedido")
                        .IsRequired()
                        .HasConstraintName("detallepedido_ibfk_1");

                    b.HasOne("TiendaVirtual.API.Models.Producto", "IdProductoNavigation")
                        .WithMany("Detallepedidos")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("detallepedido_ibfk_2");

                    b.Navigation("IdPedidoNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Direccionenvio", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Usuario", "Usuario")
                        .WithMany("Direccionenvios")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("direccionenvio_ibfk_1");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Estadopedidohistorial", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Pedido", "IdPedidoNavigation")
                        .WithMany("Estadopedidohistorials")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("estadopedidohistorial_ibfk_1");

                    b.Navigation("IdPedidoNavigation");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Factura", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Pedido", "IdPedidoNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("factura_ibfk_1");

                    b.Navigation("IdPedidoNavigation");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Juridico", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Cliente", "Cliente")
                        .WithOne("Juridico")
                        .HasForeignKey("TiendaVirtual.API.Models.Juridico", "ClienteId")
                        .IsRequired()
                        .HasConstraintName("juridico_ibfk_1");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Notificacionusuario", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Usuario", "Usuario")
                        .WithMany("Notificacionusuarios")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("notificacionusuario_ibfk_1");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Pago", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Pedido", "IdPedidoNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("IdPedido")
                        .IsRequired()
                        .HasConstraintName("pago_ibfk_1");

                    b.Navigation("IdPedidoNavigation");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Pedido", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Direccionenvio", "DireccionEnvio")
                        .WithMany("Pedidos")
                        .HasForeignKey("DireccionEnvioId")
                        .HasConstraintName("pedido_ibfk_2");

                    b.HasOne("TiendaVirtual.API.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("pedido_ibfk_1");

                    b.Navigation("DireccionEnvio");

                    b.Navigation("IdClienteNavigation");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Producto", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Categoria", "IdCategoriaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("producto_ibfk_1");

                    b.Navigation("IdCategoriaNavigation");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Productotienda", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Producto", "IdProductoNavigation")
                        .WithMany("Productotienda")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("productotienda_ibfk_1");

                    b.HasOne("TiendaVirtual.API.Models.Tienda", "IdTiendaNavigation")
                        .WithMany("Productotienda")
                        .HasForeignKey("IdTienda")
                        .IsRequired()
                        .HasConstraintName("productotienda_ibfk_2");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdTiendaNavigation");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Proveedorproducto", b =>
                {
                    b.HasOne("TiendaVirtual.API.Models.Producto", "IdProductoNavigation")
                        .WithMany("Proveedorproductos")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("proveedorproducto_ibfk_2");

                    b.HasOne("TiendaVirtual.API.Models.Proveedor", "IdProveedorNavigation")
                        .WithMany("Proveedorproductos")
                        .HasForeignKey("IdProveedor")
                        .IsRequired()
                        .HasConstraintName("proveedorproducto_ibfk_1");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Barrio", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Carrito", b =>
                {
                    b.Navigation("Carritoproductos");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Cliente", b =>
                {
                    b.Navigation("Clientenatural");

                    b.Navigation("Juridico");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Credito", b =>
                {
                    b.Navigation("Cuota");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Direccionenvio", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Pedido", b =>
                {
                    b.Navigation("Creditos");

                    b.Navigation("Deliveries");

                    b.Navigation("Detallepedidos");

                    b.Navigation("Estadopedidohistorials");

                    b.Navigation("Facturas");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Producto", b =>
                {
                    b.Navigation("Carritoproductos");

                    b.Navigation("Detallepedidos");

                    b.Navigation("Productotienda");

                    b.Navigation("Proveedorproductos");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Proveedor", b =>
                {
                    b.Navigation("Proveedorproductos");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Tienda", b =>
                {
                    b.Navigation("Productotienda");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Usuario", b =>
                {
                    b.Navigation("Carritos");

                    b.Navigation("Clientes");

                    b.Navigation("Direccionenvios");

                    b.Navigation("Notificacionusuarios");
                });

            modelBuilder.Entity("TiendaVirtual.API.Models.Zona", b =>
                {
                    b.Navigation("Barrios");
                });
#pragma warning restore 612, 618
        }
    }
}
