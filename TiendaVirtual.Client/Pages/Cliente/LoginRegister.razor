@page "/acceso"
@using TiendaVirtual.Client.Services
@using TiendaVirtual.Client.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService Auth

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center bg-light">
    <div class="row w-100 justify-content-center">
        <div class="col-12 col-md-8 col-lg-6 col-xl-5">
            <div class="card shadow-lg border-0 rounded-3">
                <div class="card-header bg-white p-0 rounded-top">
                    <ul class="nav nav-tabs nav-fill" role="tablist">
                        <li class="nav-item">
                            <button class="nav-link py-3 px-4 @(isLogin ? "active" : "")"
                                    @onclick="() => isLogin = true"
                                    role="tab">
                                <i class="bi bi-box-arrow-in-right me-2"></i>
                                Iniciar Sesión
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link py-3 px-4 @(!isLogin ? "active" : "")"
                                    @onclick="() => isLogin = false"
                                    role="tab">
                                <i class="bi bi-person-plus me-2"></i>
                                Registrarse
                            </button>
                        </li>
                    </ul>
                </div>

                <div class="card-body p-4 p-md-5">
                    @if (isLogin)
                    {
                        <div class="text-center mb-4">
                            <div class="avatar avatar-xl bg-primary rounded-3 mb-3 mx-2">
                                <i class="bi bi-person-fill text-white fs-3"></i>
                            </div>
                            <h3 class="fw-bold text-primary">Bienvenido</h3>
                            <p class="text-muted">Ingresa a tu cuenta</p>
                        </div>

                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <div class="mb-3">
                                <label class="form-label fw-semibold">Correo electrónico</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-envelope"></i>
                                    </span>
                                    <InputText class="form-control form-control-lg"
                                               @bind-Value="loginModel.Correo"
                                               placeholder="tu@correo.com" />
                                </div>
                                <ValidationMessage For="@(() => loginModel.Correo)" class="text-danger small" />
                            </div>

                            <div class="mb-4">
                                <label class="form-label fw-semibold">Contraseña</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-lock"></i>
                                    </span>
                                    <InputText type="password" class="form-control form-control-lg"
                                               @bind-Value="loginModel.Contrasena"
                                               placeholder="••••••••" />
                                </div>
                                <ValidationMessage For="@(() => loginModel.Contrasena)" class="text-danger small" />
                            </div>

                            <div class="d-grid gap-2 mb-3">
                                <button type="submit" class="btn btn-primary btn-lg" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                        <span>Iniciando...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-box-arrow-in-right me-2"></i>
                                        <span>Iniciar Sesión</span>
                                    }
                                </button>
                            </div>

                            @if (!string.IsNullOrEmpty(loginError))
                            {
                                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    @loginError
                                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                </div>
                            }
                        </EditForm>

                        <div class="text-center mt-4">
                            <p class="mb-0 text-muted">
                                ¿No tienes cuenta?
                                <a @onclick="() => isLogin = false" class="text-decoration-none fw-semibold" style="cursor:pointer">
                                    Regístrate aquí
                                </a>
                            </p>
                            <a href="/"><i class="bi bi-arrow-left"></i> Volver</a>
                        </div>

                    }
                    else
                    {
                        <div class="text-center mb-4">
                            <div class="avatar avatar-xl bg-success rounded-3 mb-3 mx-4">
                                <i class="bi bi-person-plus-fill text-white fs-3"></i>
                            </div>
                            <h3 class="fw-bold text-success">Crear Cuenta</h3>
                            <p class="text-muted">Regístrate para comenzar</p>
                        </div>

                        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <div class="mb-3">
                                <label class="form-label fw-semibold">Nombre completo</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-person"></i>
                                    </span>
                                    <InputText class="form-control form-control-lg"
                                               @bind-Value="registerModel.NombreUsuario"
                                               placeholder="Tu nombre completo" />
                                </div>
                                <ValidationMessage For="@(() => registerModel.NombreUsuario)" class="text-danger small" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label fw-semibold">Correo electrónico</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-envelope"></i>
                                    </span>
                                    <InputText class="form-control form-control-lg"
                                               @bind-Value="registerModel.Correo"
                                               placeholder="tu@correo.com" />
                                </div>
                                <ValidationMessage For="@(() => registerModel.Correo)" class="text-danger small" />
                            </div>

                            <div class="mb-4">
                                <label class="form-label fw-semibold">Contraseña</label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-lock"></i>
                                    </span>
                                    <InputText type="password" class="form-control form-control-lg"
                                               @bind-Value="registerModel.Contrasena"
                                               placeholder="Mínimo 6 caracteres" />
                                </div>
                                <ValidationMessage For="@(() => registerModel.Contrasena)" class="text-danger small" />
                                <div class="form-text">
                                    <i class="bi bi-info-circle me-1"></i>
                                    La contraseña debe tener al menos 6 caracteres
                                </div>
                            </div>

                            <div class="d-grid gap-2 mb-3">
                                <button type="submit" class="btn btn-success btn-lg" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                        <span>Registrando...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-person-check me-2"></i>
                                        <span>Crear Cuenta</span>
                                    }
                                </button>
                            </div>

                            @if (!string.IsNullOrEmpty(registerSuccess))
                            {
                                <div class="alert alert-success alert-dismissible fade show" role="alert">
                                    <i class="bi bi-check-circle me-2"></i>
                                    @registerSuccess
                                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(registerError))
                            {
                                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    @registerError
                                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                </div>
                            }
                        </EditForm>

                        <div class="text-center mt-4">
                            <p class="mb-0 text-muted">
                                ¿Ya tienes cuenta?
                                <a @onclick="() => isLogin = true" class="text-decoration-none fw-semibold" style="cursor:pointer">
                                    Inicia sesión aquí
                                </a>
                            </p>
                            <a href="/"><i class="bi bi-arrow-left"></i> Volver</a>
                        </div>
                    }
                </div>
            </div>

            <div class="text-center mt-4">
                <small class="text-muted">
                    <i class="bi bi-shield-lock me-1"></i>
                    &copy; @DateTime.Now.Year TiendaVirtual. Todos los derechos reservados.
                </small>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLogin = true;
    private bool isSubmitting = false;

    private string? loginError;
    private string? registerSuccess;
    private string? registerError;

    private LoginModel loginModel = new();
    private Usuario registerModel = new();

    protected override void OnInitialized()
    {
        if (Auth.EstaLogueado)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        if (isSubmitting) return;

        isSubmitting = true;
        loginError = null;

        try
        {
            await Auth.LoginAsync(loginModel.Correo, loginModel.Contrasena);
            if (Auth.EstaLogueado)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                loginError = "Credenciales incorrectas. Por favor, inténtalo de nuevo.";
            }
        }
        catch (Exception ex)
        {
            loginError = $"Error de conexión: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task HandleRegister()
    {
        if (isSubmitting) return;

        isSubmitting = true;
        registerError = null;
        registerSuccess = null;

        try
        {
            registerModel.TipoUsuario = "Cliente";

            var response = await Http.PostAsJsonAsync("/api/Usuarios", registerModel);
            if (response.IsSuccessStatusCode)
            {
                registerSuccess = "¡Registro exitoso! Ahora puedes iniciar sesión.";
                isLogin = true;
                registerModel = new Usuario();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                registerError = $"Error al registrar: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            registerError = $"Error de conexión: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}